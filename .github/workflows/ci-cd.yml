name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - dev
      
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        folder: [frontend]

    env:
      REACT_APP_GATEWAY_URL: ${{ secrets.REACT_APP_GATEWAY_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Navigate to folder and install dependencies
        run: |
          cd ${{ matrix.folder }}
          npm install

      - name: Run Jest tests with coverage
        run: |
          cd ${{ matrix.folder }}
          npm test -- --coverage

      - name: Upload Jest Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage
          path: frontend/coverage/lcov.info
          retention-days: 1

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Jest Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: jest-coverage
          path: frontend/coverage

      - name: Debug Coverage File
        run: ls -lah frontend/coverage/ && cat frontend/coverage/lcov.info | head -n 20

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Find All Services with Dockerfile
        id: find-services
        run: |
          folders=$(find . -type f -name "Dockerfile" -exec dirname {} \; | cut -c 3- | jq -R -s -c 'split("\n")[:-1]')
          echo "services=$folders" >> $GITHUB_ENV

      - name: Build and Push Docker Images
        run: |
          for service in $(echo $services | jq -r '.[]'); do
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/$service"
            TAG="latest"

            echo "Building and pushing $IMAGE_NAME:$TAG"

            docker build -t $IMAGE_NAME:$TAG $service
            docker push $IMAGE_NAME:$TAG
          done