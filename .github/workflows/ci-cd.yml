name: CI-CD

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
            - dev

jobs:
    build-and-test:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                folder: [frontend]

        env:
            REACT_APP_GATEWAY_URL: ${{ secrets.REACT_APP_GATEWAY_URL }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js for frontend
              if: matrix.folder == 'frontend'
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Navigate to folder and install dependencies
              run: |
                  cd ${{ matrix.folder }}
                  npm install
              if: matrix.folder == 'frontend'

            - name: Run Jest tests with coverage
              run: |
                  cd ${{ matrix.folder }}
                  npm test -- --coverage
              if: matrix.folder == 'frontend'

            - name: Upload Jest Coverage Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: jest-coverage
                  path: frontend/coverage/lcov.info
                  retention-days: 1
              if: matrix.folder == 'frontend'

    DetectChanges:
        runs-on: ubuntu-latest
        outputs:
            frontend: ${{ steps.filter.outputs.frontend }}
            gateway: ${{ steps.filter.outputs.gateway }}
            eureka: ${{ steps.filter.outputs.eureka }}
            SongService: ${{ steps.filter.outputs.SongService }}
            SongMetaService: ${{ steps.filter.outputs.SongMetaService }}
            AuthService: ${{ steps.filter.outputs.AuthService }}
            UserService: ${{ steps.filter.outputs.UserService }}
            LoggingService: ${{ steps.filter.outputs.LoggingService }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Detect folder changes
              id: filter
              uses: dorny/paths-filter@v3
              with:
                  filters: |
                      frontend:
                        - 'frontend/**'
                      gateway:
                        - 'Gateway/**'
                      eureka:
                        - 'Eureka/**'
                      SongService:
                        - 'SongService/**'
                      SongMetaService:
                        - 'SongMetaService/**'
                      AuthService:
                        - 'AuthService/**'
                      UserService:
                        - 'UserService/**'
                      LoggingService:
                        - 'LoggingService/**'

    Frontend:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.frontend == 'true'
        runs-on: ubuntu-latest
        env:
            REACT_APP_GATEWAY_URL: ${{ secrets.REACT_APP_GATEWAY_URL }}
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '14'

            - name: Install dependencies
              working-directory: ./frontend
              run: npm install

            - name: Run Jest tests with coverage
              working-directory: ./frontend
              run: npm test -- --coverage

            - name: Upload Jest Coverage Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: jest-coverage
                  path: frontend/coverage/lcov.info
                  retention-days: 1

    Gateway:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.gateway == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./Gateway
            SONAR_PROJECT_KEY: SuaraCloud_gateway
        secrets: inherit

    Eureka:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.eureka == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./Eureka
            SONAR_PROJECT_KEY: SuaraCloud_eureka
        secrets: inherit

    SongService:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.SongService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./SongService
            SONAR_PROJECT_KEY: SuaraCloud_songservice
        secrets:
            AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    SongMetaService:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.SongMetaService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./SongMetaService
            SONAR_PROJECT_KEY: SuaraCloud_songmetaservice
        secrets: inherit

    AuthService:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.AuthService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./AuthService
            SONAR_PROJECT_KEY: SuaraCloud_authservice
        secrets: inherit

    UserService:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.UserService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./UserService
            SONAR_PROJECT_KEY: SuaraCloud_userservice
        secrets:
            DATABASE_URL: ${{ secrets.USER_DATABASE_URL }}
            DATABASE_USERNAME: ${{ secrets.USER_DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.USER_DATABASE_PASSWORD }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    LoggingService:
        needs: DetectChanges
        if: needs.DetectChanges.outputs.LoggingService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./LoggingService
            SONAR_PROJECT_KEY: SuaraCloud_loggingservice
        secrets: inherit

    docker-build-and-push:
        name: Build & Push Docker Images
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Find All Services with Dockerfile
              id: find-services
              run: |
                  folders=$(find . -type f -name "Dockerfile" -exec dirname {} \; | cut -c 3- | jq -R -s -c 'split("\n")[:-1]')
                  echo "services=$folders" >> $GITHUB_ENV

            - name: Check if Dockerfiles or Relevant Files Changed
              id: check-changes
              run: |
                  git fetch --unshallow
                  changed_files=$(git diff --name-only HEAD~1..HEAD)
                  DOCKER_REBUILD=false
                  for service in $(echo $services | jq -r '.[]'); do
                      if echo "$changed_files" | grep -qE "^$service/"; then
                          DOCKER_REBUILD=true
                      fi
                  done
                  echo "DOCKER_REBUILD=$DOCKER_REBUILD" >> $GITHUB_ENV

            - name: Build and Push Docker Images
              if: env.DOCKER_REBUILD == 'true'
              run: |
                  for service in $(echo $services | jq -r '.[]'); do
                      lowercase_service="$(echo "$service" | tr '[:upper:]' '[:lower:]')"
                      image_name="${{ secrets.DOCKERHUB_USERNAME }}/$lowercase_service:latest"
                      docker build -t "$image_name" "$service"
                      docker push "$image_name"
                  done

    deploy:
        name: Deploy to AKS
        runs-on: ubuntu-latest
        needs: docker-build-and-push

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Set Kubernetes context
              run: |
                  az aks get-credentials --resource-group SuaraCloud --name SuaraCloud

            - name: Deploy services to AKS
              run: |
                  kubectl apply -f ./K8/
                  kubectl set image deployment/frontend frontend=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
                  kubectl set image deployment/gateway gateway=${{ secrets.DOCKERHUB_USERNAME }}/gateway:latest
                  kubectl set image deployment/eureka eureka=${{ secrets.DOCKERHUB_USERNAME }}/eureka:latest
                  kubectl set image deployment/song-service song-service=${{ secrets.DOCKERHUB_USERNAME }}/songservice:latest
                  kubectl set image deployment/song-meta-service song-meta-service=${{ secrets.DOCKERHUB_USERNAME }}/songmetaservice:latest
                  kubectl set image deployment/auth-service auth-service=${{ secrets.DOCKERHUB_USERNAME }}/authservice:latest
                  kubectl set image deployment/user-service user-service=${{ secrets.DOCKERHUB_USERNAME }}/userservice:latest
                  kubectl set image deployment/logging-service logging-service=${{ secrets.DOCKERHUB_USERNAME }}/loggingservice:latest
