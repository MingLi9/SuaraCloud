name: CI-CD

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
            - dev

jobs:
    detect-changes:
        runs-on: ubuntu-latest
        outputs:
            frontend: ${{ steps.filter.outputs.frontend }}
            gateway: ${{ steps.filter.outputs.gateway }}
            eureka: ${{ steps.filter.outputs.eureka }}
            SongService: ${{ steps.filter.outputs.SongService }}
            SongMetaService: ${{ steps.filter.outputs.SongMetaService }}
            AuthService: ${{ steps.filter.outputs.AuthService }}
            UserService: ${{ steps.filter.outputs.UserService }}
            LoggingService: ${{ steps.filter.outputs.LoggingService }}
            any-service-changed: ${{ steps.check-any.outputs.changed }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Detect folder changes
              id: filter
              uses: dorny/paths-filter@v3
              with:
                  filters: |
                      frontend:
                        - 'frontend/**'
                      gateway:
                        - 'Gateway/**'
                      eureka:
                        - 'Eureka/**'
                      SongService:
                        - 'SongService/**'
                      SongMetaService:
                        - 'SongMetaService/**'
                      AuthService:
                        - 'AuthService/**'
                      UserService:
                        - 'UserService/**'
                      LoggingService:
                        - 'LoggingService/**'

            - name: Check if any service changed
              id: check-any
              run: |
                  if [[ "${{ steps.filter.outputs.frontend }}" == "true" || \
                        "${{ steps.filter.outputs.gateway }}" == "true" || \
                        "${{ steps.filter.outputs.eureka }}" == "true" || \
                        "${{ steps.filter.outputs.SongService }}" == "true" || \
                        "${{ steps.filter.outputs.SongMetaService }}" == "true" || \
                        "${{ steps.filter.outputs.AuthService }}" == "true" || \
                        "${{ steps.filter.outputs.UserService }}" == "true" || \
                        "${{ steps.filter.outputs.LoggingService }}" == "true" ]]; then
                    echo "changed=true" >> $GITHUB_OUTPUT
                  else
                    echo "changed=false" >> $GITHUB_OUTPUT
                  fi

    frontend-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.frontend == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install dependencies
              working-directory: ./frontend
              run: npm install

            - name: Build
              working-directory: ./frontend
              run: npm run build

            # - name: Run Jest tests with coverage
            #   working-directory: ./frontend
            #   run: npm test -- --coverage

            # - name: Upload Jest Coverage Artifact
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: jest-coverage
            #       path: frontend/coverage/lcov.info
            #       retention-days: 1

    gateway-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.gateway == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./Gateway
            SONAR_PROJECT_KEY: SuaraCloud_gateway
        secrets: inherit

    eureka-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.eureka == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./Eureka
            SONAR_PROJECT_KEY: SuaraCloud_eureka
        secrets: inherit

    songservice-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.SongService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./SongService
            SONAR_PROJECT_KEY: SuaraCloud_songservice
        secrets: inherit

    songmetaservice-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.SongMetaService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./SongMetaService
            SONAR_PROJECT_KEY: SuaraCloud_songmetaservice
        secrets: inherit

    authservice-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.AuthService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./AuthService
            SONAR_PROJECT_KEY: SuaraCloud_authservice
        secrets: inherit

    userservice-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.UserService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./UserService
            SONAR_PROJECT_KEY: SuaraCloud_userservice
        secrets: inherit

    loggingservice-build-test:
        needs: detect-changes
        if: needs.detect-changes.outputs.LoggingService == 'true'
        uses: MingLi9/SuaraCloud/.github/workflows/java.yml@main
        with:
            directory: ./LoggingService
            SONAR_PROJECT_KEY: SuaraCloud_loggingservice
        secrets: inherit

    # Docker Build Phase - Only for changed services
    docker-build-push:
        name: Build & Push Docker Images
        runs-on: ubuntu-latest
        needs:
            - detect-changes
            - frontend-build-test
            - gateway-build-test
            - eureka-build-test
            - songservice-build-test
            - songmetaservice-build-test
            - authservice-build-test
            - userservice-build-test
            - loggingservice-build-test
        if: |
            always() && 
            needs.detect-changes.outputs.any-service-changed == 'true' &&
            !contains(needs.*.result, 'failure') &&
            !contains(needs.*.result, 'cancelled')
        strategy:
            matrix:
                include:
                    - service: frontend
                      condition: ${{ needs.detect-changes.outputs.frontend == 'true' }}
                      dockerfile_path: ./frontend
                      image_name: frontend
                    - service: gateway
                      condition: ${{ needs.detect-changes.outputs.gateway == 'true' }}
                      dockerfile_path: ./Gateway
                      image_name: gateway
                    - service: eureka
                      condition: ${{ needs.detect-changes.outputs.eureka == 'true' }}
                      dockerfile_path: ./Eureka
                      image_name: eureka
                    - service: SongService
                      condition: ${{ needs.detect-changes.outputs.SongService == 'true' }}
                      dockerfile_path: ./SongService
                      image_name: songservice
                    - service: SongMetaService
                      condition: ${{ needs.detect-changes.outputs.SongMetaService == 'true' }}
                      dockerfile_path: ./SongMetaService
                      image_name: songmetaservice
                    - service: AuthService
                      condition: ${{ needs.detect-changes.outputs.AuthService == 'true' }}
                      dockerfile_path: ./AuthService
                      image_name: authservice
                    - service: UserService
                      condition: ${{ needs.detect-changes.outputs.UserService == 'true' }}
                      dockerfile_path: ./UserService
                      image_name: userservice
                    - service: LoggingService
                      condition: ${{ needs.detect-changes.outputs.LoggingService == 'true' }}
                      dockerfile_path: ./LoggingService
                      image_name: loggingservice
        steps:
            - name: Skip if service unchanged
              if: matrix.condition != 'true'
              run: echo "Skipping ${{ matrix.service }} - no changes detected"

            - name: Checkout Repository
              if: matrix.condition == 'true'
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              if: matrix.condition == 'true'
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and Push Docker Image
              if: matrix.condition == 'true'
              run: |
                  image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:latest"
                  if [ "${{ matrix.service }}" = "frontend" ]; then
                    docker build \
                      --build-arg REACT_APP_GATEWAY_URL=${{ secrets.REACT_APP_GATEWAY_URL }} \
                      --build-arg REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }} \
                      --build-arg REACT_APP_SUPABASE_KEY=${{ secrets.REACT_APP_SUPABASE_KEY }} \
                      -t "$image_name" "${{ matrix.dockerfile_path }}"
                  else
                    docker build -t "$image_name" "${{ matrix.dockerfile_path }}"
                  fi
                  docker push "$image_name"

    integration-tests:
        name: Integration Tests
        needs:
            - detect-changes
            - docker-build-push
        if: needs.detect-changes.outputs.any-service-changed == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Integration Tests
              run: |
                  echo "Running integration tests..."
                  # Add your integration test commands here
                  # For example: docker-compose -f docker-compose.integration.yml up --abort-on-container-exit

    e2e-tests:
        name: E2E Tests
        needs:
            - detect-changes
            - integration-tests
        if: needs.detect-changes.outputs.any-service-changed == 'true'
        runs-on: ubuntu-latest

        services:
            rabbitmq:
                image: rabbitmq:management
                ports:
                    - 5672:5672
                    - 15672:15672
                    - 1883:1883
                env:
                    RABBITMQ_DEFAULT_USER: myuser
                    RABBITMQ_DEFAULT_PASS: secret
                options: >-
                    --health-cmd "rabbitmq-diagnostics -q ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Create .env file
              run: |
                  echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env
                  echo "REACT_APP_SUPABASE_KEY=${{ secrets.REACT_APP_SUPABASE_KEY }}" >> .env
                  echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
                  echo "SONG_META_DATABASE_URL=${{ secrets.SONG_META_DATABASE_URL }}" >> .env
                  echo "SONG_META_DATABASE_USERNAME=${{ secrets.SONG_META_DATABASE_USERNAME }}" >> .env
                  echo "SONG_META_DATABASE_PASSWORD=${{ secrets.SONG_META_DATABASE_PASSWORD }}" >> .env
                  echo "USER_SERVICE_DATABASE_URL=${{ secrets.USER_SERVICE_DATABASE_URL }}" >> .env
                  echo "USER_SERVICE_DATABASE_USERNAME=${{ secrets.USER_SERVICE_DATABASE_USERNAME }}" >> .env
                  echo "USER_SERVICE_DATABASE_PASSWORD=${{ secrets.USER_SERVICE_DATABASE_PASSWORD }}" >> .env
                  echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> .env
                  echo "REACT_APP_GATEWAY_URL=http://localhost:8085" >> .env

            - name: Start all services with Docker Compose
              run: docker-compose up -d --build

            - name: Wait for frontend to be ready
              run: |
                  echo "Waiting for http://localhost to be up..."
                  for i in {1..30}; do
                    if curl -s http://localhost | grep -q '<!DOCTYPE html>'; then
                      echo "Frontend is up."
                      exit 0
                    fi
                    echo "Waiting..."
                    sleep 5
                  done
                  echo "Frontend did not start in time."
                  docker-compose logs
                  exit 1

            - name: Install frontend dependencies
              working-directory: frontend
              run: npm install

            - name: Install Playwright (browsers)
              working-directory: frontend
              run: npx playwright install --with-deps

            - name: Run Playwright tests
              working-directory: frontend
              run: npx playwright test

    deploy:
        name: Deploy to AKS
        runs-on: ubuntu-latest
        needs:
            - detect-changes
            # - e2e-tests
            - docker-build-push

        if: |
            needs.detect-changes.outputs.any-service-changed == 'true' &&
            github.ref == 'refs/heads/main'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Set Kubernetes context
              run: |
                  az aks get-credentials --resource-group SuaraCloud --name SuaraCloud

            - name: Deploy services to AKS
              run: |
                  kubectl apply -f ./K8/

                  # Only update images for changed services
                  if [[ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]]; then
                    kubectl set image deployment/frontend frontend=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.gateway }}" == "true" ]]; then
                    kubectl set image deployment/gateway gateway=${{ secrets.DOCKERHUB_USERNAME }}/gateway:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.eureka }}" == "true" ]]; then
                    kubectl set image deployment/eureka eureka=${{ secrets.DOCKERHUB_USERNAME }}/eureka:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.SongService }}" == "true" ]]; then
                    kubectl set image deployment/song-service song-service=${{ secrets.DOCKERHUB_USERNAME }}/songservice:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.SongMetaService }}" == "true" ]]; then
                    kubectl set image deployment/song-meta-service song-meta-service=${{ secrets.DOCKERHUB_USERNAME }}/songmetaservice:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.AuthService }}" == "true" ]]; then
                    kubectl set image deployment/auth-service auth-service=${{ secrets.DOCKERHUB_USERNAME }}/authservice:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.UserService }}" == "true" ]]; then
                    kubectl set image deployment/user-service user-service=${{ secrets.DOCKERHUB_USERNAME }}/userservice:latest
                  fi
                  if [[ "${{ needs.detect-changes.outputs.LoggingService }}" == "true" ]]; then
                    kubectl set image deployment/logging-service logging-service=${{ secrets.DOCKERHUB_USERNAME }}/loggingservice:latest
                  fi

            - name: Wait for deployment rollout
              run: |
                  if [[ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]]; then
                    kubectl rollout status deployment/frontend --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.gateway }}" == "true" ]]; then
                    kubectl rollout status deployment/gateway --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.eureka }}" == "true" ]]; then
                    kubectl rollout status deployment/eureka --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.SongService }}" == "true" ]]; then
                    kubectl rollout status deployment/song-service --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.SongMetaService }}" == "true" ]]; then
                    kubectl rollout status deployment/song-meta-service --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.AuthService }}" == "true" ]]; then
                    kubectl rollout status deployment/auth-service --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.UserService }}" == "true" ]]; then
                    kubectl rollout status deployment/user-service --timeout=300s
                  fi
                  if [[ "${{ needs.detect-changes.outputs.LoggingService }}" == "true" ]]; then
                    kubectl rollout status deployment/logging-service --timeout=300s
                  fi
